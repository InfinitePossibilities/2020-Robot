/*
    ColorWheelSubsystem

    This implements a motor to spin the wheel and a color
    a sensor to detect the current color.
    And a linear actuator to raise and lower the
    mechanism.

*/
package frc.robot.subsystems;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.util.Color;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.revrobotics.ColorMatch;
import com.revrobotics.ColorMatchResult;
import com.revrobotics.ColorSensorV3;

import frc.robot.RobotMap;

// import frc.robot.commands.HookReleaseCommand;



public class ColorWheelSubsystem extends Subsystem {
    private Spark spinMotor;
    private Servo colorLifters;
    private final int _MAX_ANGLE = 90;
    private final int _MIN_ANGLE = 85;
    private double _ANGLE = 85;
    private final I2C.Port I2Cport = I2C.Port.kOnboard;
    private final ColorSensorV3 colorSensor = new ColorSensorV3(I2Cport);

    private final ColorMatch colorMatcher = new ColorMatch();
    private final Color blueTarget = ColorMatch.makeColor(0.143, 0.427, 0.429);
    private final Color greenTarget = ColorMatch.makeColor(0.197, 0.561, 0.240);
    private final Color redTarget = ColorMatch.makeColor(0.561, 0.232, 0.114);
    private final Color yellowTarget = ColorMatch.makeColor(0.361, 0.524, 0.113);


    public ColorWheelSubsystem(){
        spinMotor = new Spark(RobotMap.COLOR_WHEEL_MOTOR_CHANNEL.value);
        colorLifters = new Servo (RobotMap.ACTUATORS_CHANNEL.value);

        colorMatcher.addColorMatch(blueTarget);
        colorMatcher.addColorMatch(greenTarget);
        colorMatcher.addColorMatch(redTarget);
        colorMatcher.addColorMatch(yellowTarget);
    }

    public void setColorMotorSpeed(double x) {
        spinMotor.set(x);
    }

    public void setAngle(boolean direction){
        if (direction){_ANGLE = _ANGLE -1;}else{_ANGLE = _ANGLE + 1;}
        if (_ANGLE > _MAX_ANGLE){ _ANGLE = _MAX_ANGLE;}
        if (_ANGLE < _MIN_ANGLE){ _ANGLE = _MIN_ANGLE;}
        colorLifters.setAngle(_ANGLE);
        // System.out.println(_ANGLE);
    }
    public void updateAngle(){
        colorLifters.setAngle(_ANGLE);
        Color detectedColor = colorSensor.getColor();
        double ir = colorSensor.getIR();
        int prox = colorSensor.getProximity();
        ColorMatchResult match = colorMatcher.matchClosestColor(detectedColor);
        String colorString;
        if ( match.color == blueTarget) {
            colorString = "Blue";
        } else if ( match.color == redTarget ) {
            colorString = "Red";
        } else if ( match.color == greenTarget ) {
            colorString = "Green";
        } else if ( match.color == yellowTarget ) {
            colorString = "Yellow";
        } else {
            colorString = "Unknown";
        }
        SmartDashboard.putNumber("RED", detectedColor.red);
        SmartDashboard.putNumber("GREEN", detectedColor.green);
        SmartDashboard.putNumber("BLUE", detectedColor.blue);
        SmartDashboard.putNumber("IR", ir);
        SmartDashboard.putNumber("PROX", prox);
        SmartDashboard.putString("Color",colorString);
    }   


    @Override
    protected void initDefaultCommand() {
        // setDefaultCommand(new HookReleaseCommand());
        
    }
}
